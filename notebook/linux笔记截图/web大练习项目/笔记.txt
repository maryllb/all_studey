
 open --- close   系统调用		“内核缓冲区”

 fopen  --- fclose    库函数 ――――》 系统调用          “用户缓冲区”  “内核缓冲区”


 行缓冲：

	缓冲区的刷新，依赖换行标记。\n  \r\n  		标准输出缓冲区。  fflush(stdout);  --- 只有stdout

 全缓冲：

	缓冲区的刷新， 依赖于文件结束标记EOF。 		用户缓冲区、内核默认文件读写缓冲区。

 无缓冲：

	只要缓冲中有内容，立即刷新到屏幕。		标准错误缓冲区。



目录的处理：

	1. 判断 argc ！= 2

	2. chdir()  工作目录切换

	3. fgets 读取 http 首行。    GET　/  http/1.1			GET /hello.c http/1.1

	4. 拆分 sscanf("%[^ ] ...", )     单独判断 /   ./  ../ 

	5. stat   是文件 还是 目录

	6. 分支 语句  
			1） 文件 

				。。。。。

			2）目录

				遍历该目录下的 所有子文件、目录内容，形成列表展示。

				写header、 html -> 显示目录的列表项。

				注意 . 和 ..

	7. 中文 和 特殊字符的编码和解码

		Unicode 大 --> e5 a4 a7 

		Unicode 学 --> e5 ad a6


ctags： Linux操作系统默认一个代码查看工具。

	sudo apt-get(aptitude) install ctags

	ctags --help

	1. 建立源码之间的组织关系：

		1） ctags ./*.c -R   生成 tags 文件 。 组织当前项目 之间的模块调用关系。

		2） 在源码内部，使用Ctrl-p 直接在 源码所在目录位置生成 tags 。

	2. 光标挪移到待查看的函数名上， 使用 Ctrl-] 跳转到函数定义位置。

	3. Ctrl-T 跳回到 跳转起始位置。

	4. Ctrl-o 查看当前项目 包含的模块列表。

	5. F4 查看模块内的函数列表。 

	 
类 xinetd 服务器:

	1. 守护进程 ：  fork（）  父 exit（）;   子 setsid() 创建会话。   关闭文件描述符。  修改文件权限。 

	2. main { while （1） { ... }  }

	3. socket();   bind、 listen、  setsockopt(); 端口复用。   端口的获取： 1. 对应的配置文件。其中存储 port

										2. 写死。2222

										3. 参数传递：   提示用户。 命令行参数。
	4. epoll、select、poll 监听客户端的连接请求。 （高并发。。。）

	5. cfd = accpet() 创建一个 用于通信 fd （套接字）

	6. 创建一个进程、线程。 pthread_create(); 分离态。detach();    子线程 主控函数中 浏览器通信。

	7. 处理 浏览器请求。 xhttpd 的功能。


APUE---  系统编程

UNP ---  网络编程


























	

	























				

 